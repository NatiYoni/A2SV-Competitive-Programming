# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:


        parent = [i for i in range(len(graph))] 
        size = [1] * len(graph)

        def find(x):
            while x != parent[x]:
                parent[x] = parent[parent[x]]
                x = parent[x]
            
            return x
            
        def union(x,y):
            xp = find(x)
            yp = find(y)

            if xp != yp:
                if xp < yp:
                    xp, yp = yp, xp
                
                parent[yp] = xp
                size[xp] += size[yp]
            
                
        for i in range(len(graph)):
            for j in range(len(graph)):
                if graph[i][j] == 1:
                    union(i,j)
        

    
        p = defaultdict(int)
        for val in initial:
            temp = find(val)

            p[temp] += 1
        
        res = set()
        si = 0
        for key,val in p.items():
            if val == 1:
                if si < size[key]:
                    res.clear()
                    res.add(key)
                    si = size[key]

                elif si == size[key]:
                    res.add(key)
        
        # print(p)
        ans = []
        if res:
            for val in initial:
                temp = find(val)

                if temp in res:
                    ans.append(val)
        
        return min(initial) if not ans else min(ans)
            
    
